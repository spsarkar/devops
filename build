#!/usr/bin/env node

var async = require('async')
  , fs = require('fs')
  , mustache = require('mustache')
  , request = require('request')
  , yargs = require('yargs');

var cluster = yargs.argv._[0];
var clusterPath = 'clusters/' + cluster + '/';
var configString = fs.readFileSync(clusterPath + 'config.json', 'utf8');
var config = JSON.parse(configString);

configString = mustache.render(configString, config);
config = JSON.parse(configString);

var mergeDicts = function(dict1, dict2) {
    var merged = {};

    for (var key in dict1) { merged[key] = dict1[key]; }
    for (var key in dict2) { merged[key] = dict2[key]; }

    return merged;
};

var buildCreateClusterScript = function(config) {
    var scriptTemplate = fs.readFileSync('templates/create-cluster.sh', 'utf8');

    var createScript = mustache.render(scriptTemplate, config.cluster);

    var createClusterPath = clusterPath + 'create-cluster.sh';

    fs.writeFileSync(createClusterPath, createScript);
    fs.chmodSync(createClusterPath, 0755);
};

var buildInstallScript = function(config, environment) {
    var templateVariables = mergeDicts(config.cluster, environment);

    var scriptTemplate = fs.readFileSync('templates/install.sh', 'utf8');

    var installScript = mustache.render(scriptTemplate, templateVariables);

    var scriptPath = clusterPath + 'install-' + environment.environment + '.sh';

    fs.writeFileSync(scriptPath, installScript);
    fs.chmodSync(scriptPath, 0755);
};

var buildConfigScript = function(config, environment) {
    var templateVariables = mergeDicts(config.cluster, environment);

    var scriptTemplate = fs.readFileSync('templates/config-env.sh', 'utf8');

    var createScript = mustache.render(scriptTemplate, templateVariables);

    var createClusterPath = clusterPath + 'config-env-' + environment.environment + '.sh';

    fs.writeFileSync(createClusterPath, createScript);
    fs.chmodSync(createClusterPath, 0755);
};

var buildInstallScripts = function(config) {
    config.environments.forEach(function(environment) {
        buildInstallScript(config, environment);
        buildConfigScript(config, environment);
    });
};

buildCreateClusterScript(config);
buildInstallScripts(config);