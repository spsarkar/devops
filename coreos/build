#!/usr/bin/env node

var async = require('async')
  , fs = require('fs')
  , mustache = require('mustache')
  , request = require('request')
  , yargs = require('yargs');

var environment = yargs.argv._[0];
var environmentPath = 'environments/' + environment + '/';
var configString = fs.readFileSync(environmentPath + 'config.json', 'utf8');
var config = JSON.parse(configString);

var buildClusters = function(config) {
    var scriptTemplate = fs.readFileSync('templates/create-clusters.sh', 'utf8');

    var upgradeScript = mustache.render(scriptTemplate, config);

    var scriptPath = environmentPath + 'create-clusters.sh';

    fs.writeFileSync(scriptPath, upgradeScript);
    fs.chmodSync(scriptPath, 0755);
};

var buildConfigEtcdScript = function(config) {
    var scriptTemplate = fs.readFileSync('templates/config-etcd', 'utf8');

    var createScript = mustache.render(scriptTemplate, config);

    var createClusterPath = environmentPath + 'config-etcd';

    fs.writeFileSync(createClusterPath, createScript);
    fs.chmodSync(createClusterPath, 0755);
};

var buildNewRelicScript = function(config) {
    var scriptTemplate = fs.readFileSync('templates/newrelic-sysmond.service', 'utf8');

    var createScript = mustache.render(scriptTemplate, config);

    var createClusterPath = environmentPath + 'newrelic-sysmond.service';

    fs.writeFileSync(createClusterPath, createScript);
    fs.chmodSync(createClusterPath, 0755);
};

var buildFleetctlScripts = function(config) {
    ['frontdoor', 'ingestion', 'registry', 'consumption'].forEach(function(service) {
        var sshTemplate = fs.readFileSync('templates/cluster-ssh', 'utf8');
        var sshScript = mustache.render(sshTemplate, { cloud_service: config[service + '_cloud_service'] });

        var sshPath = environmentPath + service + '-ssh';
        fs.writeFileSync(sshPath, sshScript);
        fs.chmodSync(sshPath, 0755);

        var fleetctlTemplate = fs.readFileSync('templates/cluster-fleetctl', 'utf8');
        var fleetctlScript = mustache.render(fleetctlTemplate, { cloud_service: config[service + '_cloud_service'] });

        var fleetctlPath = environmentPath + service + '-fleetctl';
        fs.writeFileSync(fleetctlPath, fleetctlScript);
        fs.chmodSync(fleetctlPath, 0755);
    });
};

buildConfigEtcdScript(config);
buildNewRelicScript(config);
buildClusters(config);
buildFleetctlScripts(config);